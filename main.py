import os
from fastapi import FastAPI, HTTPException
from supabase import create_client, Client
from typing import Optional
from fastapi.middleware.cors import CORSMiddleware
import google.generativeai as genai
from dotenv import load_dotenv
import uuid
from pydantic import BaseModel
from datetime import datetime
from API_Database import TransactionFilter, get_filtered_transactions, get_unique_values, get_recent_transactions
import requests
from bs4 import BeautifulSoup
from openai import OpenAI

# Load environment variables
load_dotenv()

# Initialize FastAPI app
app = FastAPI()

# Initialize Supabase client
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# Configure Google Generative AI API key
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

# Initialize the Generative AI model
model = genai.GenerativeModel('gemini-2.0-flash-exp')

#OpenAIAPI
#client = OpenAI(api_key="your-api-key-here")
client = OpenAI(api_key=os.getenv("OPENAI"))
MODEL = "03-mini"


#Github
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
GITHUB_API_URL = os.getenv("GITHUB_API_URL")

headers = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

# CORS middleware setup
app.add_middleware(
    CORSMiddleware,
    allow_origins=   ["*"] ,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Allow all origins (or specify your frontend URL)
    allow_credentials=True,
    allow_methods=["*"],  # Allow all methods (GET, POST, etc.)
    allow_headers=["*"],  # Allow all headers
)


@app.get("/")
async def root():
    return {"message": "My Taste"}

# fastapi_app.py
from fastapi import FastAPI


@app.get("/ping")
async def ping():
    return {"status": "up and running"}

@app.post("/aimia")
async def generate_text_endpoint(request: GenerateTextRequest):
    """Endpoint to generate text and save the prompt and response to Supabase (selection_responses)."""
    try:
        # Example of AI model generation (replace with your actual AI model logic)
        response_text = f"Generated response for {request.item_1} and {request.item_2}"

        # Prepare data for Supabase insertion
        data = {
            "response_id": str(uuid.uuid4()),  # Generate a unique UUID
            "item_1": request.item_1,
            "item_2": request.item_2,
            "specific_note": request.specific_note,  # Optional field
            "response_text": response_text,
            "response_date": datetime.now().isoformat(),
            "user_id": request.user_id,
            "project_id": request.project_id,
            "response_group_id": request.response_group_id,
        }

        # Insert data into the selection_responses table in Supabase
        response = supabase.table("selection_responses").insert(data).execute()

        # Check if insertion is successful
        if response.status_code == 201:  # Check for successful insertion
            return {"message": "Text generated and saved successfully", "generated_text": response_text}
        else:
            raise HTTPException(status_code=500, detail="Failed to insert response into database.")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/products")
async def get_all_products():
    """Fetch all products from the Supabase 'products' table."""
    try:
        response = supabase.table("products").select("*").execute()
        if response.data:  # Check if data is returned
            return response.data
        else:  # Handle empty results or errors
            raise HTTPException(status_code=500, detail="Error fetching products or no products found.")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/products/{product_id}")
async def get_product(product_id: int):
    """Fetch a single product by ID from the Supabase 'products' table."""
    try:
        response = supabase.table("products").select("*").eq("id", product_id).single().execute()
        if response.data:  # Check if the product exists
            return response.data
        else:  # Handle product not found
            raise HTTPException(status_code=404, detail=f"Product with ID {product_id} not found.")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/generate-text")
async def generate_text(prompt: str):
    """Generate text using the Google Generative AI model."""
    try:
        # Generate content using the AI model
        response = model.generate_content(prompt)
        if response.text:  # Check if the response contains text
            return {"generated_text": response.text}
        else:  # Handle cases where no text is generated
            raise HTTPException(status_code=500, detail="No text generated by the AI model.")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# Define the new route for average price by type
@app.get("/analytics/average-price-by-type")
async def get_average_price_by_type():
    """Fetch the average price of products grouped by type."""
    try:
        response = supabase.rpc("get_average_price_by_type").execute()
        if response.data:
            return response.data
        else:
            raise HTTPException(status_code=500, detail="Error fetching average prices or no data found.")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# Get all data from the transactions table
@app.get("/transactions")
async def get_all_transactions():
    """Fetch all transactions from the Supabase 'transactions' table."""
    try:
        response = supabase.table("transactions").select("*").execute()
        if response.data:  # Check if the table contains data
            return response.data
        else:  # Handle empty table
            raise HTTPException(status_code=404, detail="No transactions found.")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/analytics")
async def get_analytics():
    """Fetch the analytics pack from the Supabase database."""
    try:
        # Call the function get_analytics_pack() which returns the precomputed analytics
        response = supabase.rpc("get_analytics_pack").execute()
        
        if response.data:  # Check if data is returned
            return response.data
        else:  # Handle empty results or errors
            raise HTTPException(status_code=500, detail="Error fetching analytics data.")
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

class GenerateTextRequest(BaseModel):
    prompt: str
    user_id: str
    category: str
    sub_category: str
    retailer_name: str
    location: str

@app.post("/generate-text2")
async def generate_text_endpoint(request: GenerateTextRequest):
    """Endpoint to generate text and save the prompt and response to Supabase."""
    try:
        # Generate content using the AI model
        response = model.generate_content(request.prompt)
        if response.text:  # Check if the response contains text
            generated_text = response.text

            # Prepare data for Supabase insertion
            data = {
                "id": str(uuid.uuid4()),  # Generate a unique UUID
                "category": request.category,
                "sub_category": request.sub_category,
                "prompt": request.prompt,
                "response": generated_text,
                "model_name": "Google Generative AI",  # Replace with your actual model name
                "created_at": datetime.now().isoformat(),
                "user_id": request.user_id,
                "retailer_name": request.retailer_name,
                "location": request.location
            }

            # Insert data into the Supabase table
            supabase.table("gpt_responses").insert(data).execute()

            return {"generated_text": generated_text}
        else:  # Handle cases where no text is generated
            raise HTTPException(status_code=500, detail="No text generated by the AI model.")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))



# Supabase endpont for getting transactions
@app.post("/api/transactions")
async def filter_transactions(filters: TransactionFilter):
    try:
        return await get_filtered_transactions(supabase, filters)
    except Exception as e:
        return {"error": str(e), "detail": "Something went wrong while filtering transactions"}


@app.get("/api/unique-values")
async def get_unique_values_endpoint():
    """Fetch all unique values for filtering from the transactions table."""
    return await get_unique_values(supabase)

#Get LAtest 20 transactions
@app.get("/api/recent-transactions")
async def get_recent_transactions_endpoint(limit: Optional[int] = 20):
    """Fetch the most recent transactions, defaulting to 20."""
    if limit > 100:  # Add a reasonable upper limit
        raise HTTPException(status_code=400, detail="Limit cannot exceed 100 transactions")
    return await get_recent_transactions(supabase, limit)


# Sales Forecast Fetch Function
async def get_sales_forecast(supabase):
    try:
        response = supabase.table("sales_forecast").select("*").execute()
        return response.data
    except Exception as e:
        raise RuntimeError(f"Error fetching sales forecast: {e}")

# Endpoint
@app.get("/api/salesforecast")
async def get_sales_forecast_endpoint():
    """Fetch all values from the sales forecast table."""
    try:
        data = await get_sales_forecast(supabase)
        return {"success": True, "data": data}
    except Exception as e:
        return {"success": False, "error": str(e)}



############ aiMia
@app.post("/create-repo/")
async def create_repo(repo_name: str, description: str = "", private: bool = False):
    repo_data = {
        "name": repo_name,
        "description": description,
        "private": private
    }
    response = requests.post(f"{GITHUB_API_URL}/user/repos", headers=headers, json=repo_data)
    if response.status_code == 201:
        return {"message": "Repository created successfully!", "data": response.json()}
    else:
        raise HTTPException(status_code=response.status_code, detail=response.json())

@app.get("/list-repos/")
async def list_repos():
    response = requests.get(f"{GITHUB_API_URL}/user/repos", headers=headers)
    if response.status_code == 200:
        repos = [repo["name"] for repo in response.json()]
        return {"repositories": repos}
    else:
        raise HTTPException(status_code=response.status_code, detail=response.json())

@app.get("/fetch-trending-styles/")
async def fetch_trending_styles():
    url = "https://www.example.com/trending-hair-braiding-styles"  # Replace with a real URL
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'lxml')
    styles = []
    for item in soup.find_all('div', class_='style-item'):  # Adjust the class name as needed
        style_name = item.find('h2').text.strip()
        style_description = item.find('p').text.strip()
        styles.append({"name": style_name, "description": style_description})
    
    # Insert styles into Supabase
    for style in styles:
        supabase.table('trending_styles').insert(style).execute()
    
    return {"trending_styles": styles}


class Query(BaseModel):
    prompt: str

@app.post("/ask")
async def ask(query: Query):
    # Use OpenAI to generate a response
    completion = client.chat.completions.create(
        model=MODEL,  # Replace with your desired model, e.g., "gpt-4"
        messages=[
            {"role": "system", "content": "You are a helpful coding assistant."},
            {"role": "user", "content": query.prompt}
        ]
    )
    
    # Extract the response from the completion object
    response = completion.choices[0].message.content
    
    return {"response": response}



@app.get("/github/repos")
async def get_github_repos():
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    response = requests.get("https://api.github.com/user/repos", headers=headers)
    if response.status_code == 200:
        repos = [repo["name"] for repo in response.json()]
        return {"repos": repos}
    else:
        raise HTTPException(status_code=response.status_code, detail="Error fetching GitHub repos")

@app.post("/store_data")
async def store_data(data: dict):
    # Store data in Supabase
    response = supabase.table("your_table_name").insert(data).execute()
    if response:
        return {"message": "Data stored successfully"}
    else:
        raise HTTPException(status_code=500, detail="Error storing data in Supabase")


#############################
class CreateTableRequest(BaseModel):
    table_name: str
    schema: str  # Example: "name TEXT, age INTEGER"

@app.post("/create-table")
async def create_table(request: CreateTableRequest):
    try:
        query = f"""
        CREATE TABLE IF NOT EXISTS {request.table_name} (
            id SERIAL PRIMARY KEY,
            {request.schema}
        );
        """
        
        # Call the custom RPC function via Supabase REST API
        headers = {
            "apikey": SUPABASE_KEY,
            "Authorization": f"Bearer {SUPABASE_KEY}",
            "Content-Type": "application/json"
        }
        payload = {
            "query": query
        }
        response = requests.post(
            f"{SUPABASE_URL}/rest/v1/rpc/execute_sql",
            headers=headers,
            json=payload
        )
        
        if response.status_code != 200:
            raise HTTPException(status_code=response.status_code, detail=f"Error creating table: {response.text}")
        
        return {"message": f"Table '{request.table_name}' created successfully!"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
